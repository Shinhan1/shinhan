/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.31
 * Generated at: 2020-03-23 00:49:55 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.w20200320;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class ajaxEx04_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>ajaxEx04.jsp</title>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("\t// 비동기 통신 객체 : XMLHttpRequest 객체\r\n");
      out.write("\t// (참고) 이 비동기 통신 객체가 웹 브라우저에 따라서 이름이 다름. 특히 MS\r\n");
      out.write("\tvar xhr = null;\r\n");
      out.write("\tfunction getXMLHttpRequest() {\r\n");
      out.write("\t\t// MS 브라우저라면..\r\n");
      out.write("\t\tif(window.ActiveObject){\r\n");
      out.write("\t\t\ttry {\r\n");
      out.write("\t\t\t\treturn new ActiveObject(\"MsXML2.XMLHttp\");\r\n");
      out.write("\t\t\t}catch(e){\r\n");
      out.write("\t\t\t\ttry{\r\n");
      out.write("\t\t\t\t\treturn new ActiveObject(\"Microsoft.XMLHTTP\");\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t}catch(e){\r\n");
      out.write("\t\t\t\t\tnull;\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}// outer try~catch end\r\n");
      out.write("\t\t}else if(window.XMLHttpRequest) {\r\n");
      out.write("\t\t\t// 그 외 브라우저라면\r\n");
      out.write("\t\t\treturn new XMLHttpRequest();\r\n");
      out.write("\t\t}else {\r\n");
      out.write("\t\t\treturn null;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t}// XMLHttpRequest() end\r\n");
      out.write("\t\r\n");
      out.write("\tfunction load(url) {\r\n");
      out.write("\t\t//console.log(url);\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t// 1. XMLHttpRequest 객체 얻어오기\r\n");
      out.write("\t\txhr = new XMLHttpRequest();\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tconsole.dir(xhr);\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t// 2. 화면에 출력할 부분\r\n");
      out.write("\t\txhr.onreadystatechange = viewMessage;\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t// 3. open(method 결정, 주소, 비동기 통신 여부)\r\n");
      out.write("\t\txhr.open('GET', url, true);\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t// 4. send() : 실행\r\n");
      out.write("\t\txhr.send();\r\n");
      out.write("\t\t\r\n");
      out.write("\t}\t// load() end\r\n");
      out.write("\t\r\n");
      out.write("\tfunction viewMessage() {\r\n");
      out.write("\t\t// readyState : 0 ~ 4 단계 (4이면 완료)\r\n");
      out.write("\t\tif(xhr.readyState==4) {\r\n");
      out.write("\t\t\t// 그리고 정상페이지이면\r\n");
      out.write("\t\t\tif(xhr.status==200){\r\n");
      out.write("\t\t\t\t//alert(xhr.responseText);\r\n");
      out.write("\t\t\t\tvar div1 = document.getElementById(\"div1\");\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tdiv1.innerHTML = '<h1>' + xhr.responseText + '</h1>';\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t}\t// viewMessage() end\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<!-- Ajax(Asynchronous JavaScript and XML)\r\n");
      out.write("\t\r\n");
      out.write("\t: 자바스크립트를 이용해서 서버와 XML(데이터)로 부터 데이터를 추출하여\r\n");
      out.write("\t    웹페이지 전체 갱신없이 부분적으로 갱신하여 출력할 수 있도록 하는 기술 -->\r\n");
      out.write("\r\n");
      out.write("\t<input type=\"button\" value=\"simple1.txt\" onclick=\"load('simple1.txt')\" />\r\n");
      out.write("\t<input type=\"button\" value=\"simple1.jsp\" onclick=\"load('simple1.jsp')\" />\r\n");
      out.write("\t<input type=\"button\" value=\"simple2.txt\" onclick=\"load('simple2.txt')\" />\r\n");
      out.write("\t<input type=\"button\" value=\"simple2.jsp\" onclick=\"load('simple2.jsp')\" />\r\n");
      out.write("\t\r\n");
      out.write("\t<div id=\"div1\">\r\n");
      out.write("\t\t<!-- 서버 혹은 데이터파일에서 가져온 내용을 웹페이지 갱신없이 출력 -->\r\n");
      out.write("\t\r\n");
      out.write("\t</div>\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
