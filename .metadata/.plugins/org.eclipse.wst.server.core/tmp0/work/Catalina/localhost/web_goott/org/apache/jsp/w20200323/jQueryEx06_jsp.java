/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.31
 * Generated at: 2020-03-23 08:05:32 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.w20200323;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class jQueryEx06_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>jQueryEx06.jsp</title>\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write("\t.myStyle {\r\n");
      out.write("\t\tborder : 5px solid black;\r\n");
      out.write("\t}\r\n");
      out.write("</style>\r\n");
      out.write("<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("\t$(document).ready(function(){\r\n");
      out.write("\t\t// 1번 버튼을 누르면 CSS 효과를 적용하기\r\n");
      out.write("\t\t$(\"#btn1\").click(function(){\r\n");
      out.write("\t\t\t// $을 이용하여 객체를 찾아가면 결국 느려짐 - $(선택자)를 변수로 선언해두면 리소스를 아낄수 있음\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tvar box1 = $(\"#box1\");\r\n");
      out.write("\t\t\tbox1.css({\r\n");
      out.write("\t\t\t\t\"color\" : \"red\",\r\n");
      out.write("\t\t\t\t\"background-color\" : \"green\"\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t/* $(\"#box1\").css(\"background-color\", \"green\");\r\n");
      out.write("\t\t\t$(\"#box1\").css(\"color\", \"red\");\r\n");
      out.write("\t\t\t$(\"#box1\").css(\"color\", \"yellow\"); */\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t// 1. 맵 방식 - JSON 객체 이용 {name1 : value1, name2 : value2, ... }\r\n");
      out.write("\t\t\t/* $(\"#box1\").css({\r\n");
      out.write("\t\t\t\t\"color\" : \"red\",\r\n");
      out.write("\t\t\t\t\"background-color\" : \"green\"\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t}); */\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t// 2. 메소드 체이닝 방식\r\n");
      out.write("\t\t\t// $(\"#box1\").css(\"background-color\", \"green\").css(\"color\", \"red\");\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t});\t// btn1 click() end\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t// 2번 버튼을 누르면 prompt를 띄워서 어떤 배경색을 사용할 지 물어보고 box1의 배경색을 변경\r\n");
      out.write("\t\t$(\"#btn2\").on('click', function(){\r\n");
      out.write("\t\t\tvar color = prompt(\"어떤 배경색을 사용할까요?\");\r\n");
      out.write("\t\t\t$(\"#box1\").css(\"background-color\", color);\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t});\t// bt2 click end\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t// 3번 버튼을 누르면 box1의 너비를 구해서 alert에 출력\r\n");
      out.write("\t\t$(\"#btn3\").click(function(){\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tvar width = $(\"#box1\").css('width');\r\n");
      out.write("\t\t\t// CSS를 속성만 주고 value값을 안주면 그 원래 값을 가져올 수 있음\r\n");
      out.write("\t\t\talert(width);\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t});\t// btn3 click end\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t// 4번 버튼을 누르면 box1에 myStyle 클래스를 추가\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t$(\"#btn4\").click(function(){\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t$(\"#box1\").addClass('myStyle');\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t});\t// btn4 click end\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t// 5번 버튼을 누르면 box1에서 myStyle 클래스를 제거\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t$(\"#btn5\").click(function(){\r\n");
      out.write("\t\t\t$(\"#box1\").removeClass('myStyle');\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t});\t// btn5 click end\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t/* \r\n");
      out.write("\t\t// 이미지에 마우스가 올라오면 테두리를 추가\r\n");
      out.write("\t\t$(\"#img\").on('mouseenter',function(){\t\t\t// mouseover\r\n");
      out.write("\t\t\t$(\"#img\").addClass('myStyle');\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t// 이미지에서 마우스가 벗어나면 테두리를 삭제\r\n");
      out.write("\t\t$(\"#img\").on('mouseleave', function(){\t\t\t// mouseout\r\n");
      out.write("\t\t\t$(\"#img\").removeClass('myStyle');\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\t*/\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t$(\"img\").on('mouseover', function(){\r\n");
      out.write("\t\t\t$(this).css(\"border\", \"3px solid red\");\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t$(\"img\").mouseout(function(){\r\n");
      out.write("\t\t\t$(this).css(\"border\", \"none\");\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t/* $(\"img\").hover(function(){\r\n");
      out.write("\t\t\t$(this).addClass('myStyle');\r\n");
      out.write("\t\t},function(){\r\n");
      out.write("\t\t\t$(this).removeClass('myStyle');\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\t */\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t\r\n");
      out.write("\t});\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<!-- CSS 처리를 위한 버튼 -->\r\n");
      out.write("\t<!-- input:button[value=\"btn$\"][id=\"btn$\"]*5 -->\r\n");
      out.write("\t<input type=\"button\" value=\"btn1\" id=\"btn1\" />\r\n");
      out.write("\t<input type=\"button\" value=\"btn2\" id=\"btn2\" />\r\n");
      out.write("\t<input type=\"button\" value=\"btn3\" id=\"btn3\" />\r\n");
      out.write("\t<input type=\"button\" value=\"btn4\" id=\"btn4\" />\r\n");
      out.write("\t<input type=\"button\" value=\"btn5\" id=\"btn5\" />\r\n");
      out.write("\t\r\n");
      out.write("\t<div id=\"box1\">box1</div>\r\n");
      out.write("\t\r\n");
      out.write("\t<img src=\"../images/stone.jpg\" alt=\"stoneisland\" id=\"img\" />\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
