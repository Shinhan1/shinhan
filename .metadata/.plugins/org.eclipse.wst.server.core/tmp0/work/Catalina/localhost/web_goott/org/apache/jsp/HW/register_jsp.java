/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.31
 * Generated at: 2020-02-25 01:23:53 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.HW;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class register_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"ko\" dir=\"ltr\">\r\n");
      out.write("  <head>\r\n");
      out.write("    <meta charset=\"utf-8\">\r\n");
      out.write("    <title>아마존 회원가입</title>\r\n");
      out.write("    <style media=\"screen\">\r\n");
      out.write("      #amazon {\r\n");
      out.write("        color : black;\r\n");
      out.write("        text-align: center;\r\n");
      out.write("\r\n");
      out.write("      }\r\n");
      out.write("      #myDiv {\r\n");
      out.write("        width : 270px;\r\n");
      out.write("        height : 560px;\r\n");
      out.write("        border : 1px solid #ddd;\r\n");
      out.write("        padding: 20px 20px 20px 20px;\r\n");
      out.write("        margin : 0 auto;\r\n");
      out.write("        border-radius:10px;\r\n");
      out.write("      }\r\n");
      out.write("\r\n");
      out.write("      p{\r\n");
      out.write("        font-size : 27px;\r\n");
      out.write("      }\r\n");
      out.write("      #bt {\r\n");
      out.write("        width : 260px;\r\n");
      out.write("        height : 30px;\r\n");
      out.write("        background-color : #f0c14b;\r\n");
      out.write("        border-radius:5px;\r\n");
      out.write("      }\r\n");
      out.write("      input {\r\n");
      out.write("        border-radius:4px;\r\n");
      out.write("        width : 260px;\r\n");
      out.write("        height : 20px;\r\n");
      out.write("        border: 1px solid #A6A6A6;\r\n");
      out.write("      }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    </style>\r\n");
      out.write("    <script type=\"text/javascript\">\r\n");
      out.write("\t\tfunction checkForm(x) {\r\n");
      out.write("\r\n");
      out.write("\t\t\tvar name = x.form[0].value;\r\n");
      out.write("\t\t\tvar email = x.form[1].value;\r\n");
      out.write("\t\t\tvar pw = x.form[2].value;\r\n");
      out.write("\t\t\tvar pwch = x.form[3].value;\r\n");
      out.write("\r\n");
      out.write("\t\t\tconsole.log(\"name : \" + name);\r\n");
      out.write("\t\t\tconsole.log(\"email : \" + email);\r\n");
      out.write("\t\t\tconsole.log(\"password : \" + pw);\r\n");
      out.write("\t\t\tconsole.log(\"passwordcheck : \" + pwch);\r\n");
      out.write("\r\n");
      out.write("\t\t\tif(name ==\"\") {\r\n");
      out.write("\t\t\t\talert(\"이름을 입력하세요.\");\r\n");
      out.write("\t\t\t\t// 경고창 확인 후 아이디 텍스트 창으로 포커스 추가\r\n");
      out.write("\t\t\t\tx.form[0].focus();\r\n");
      out.write("\r\n");
      out.write("\t\t\t\treturn;\t\t\t// 값을 반환하고 중지해!\r\n");
      out.write("\t\t\t}else if(email == \"\") {\r\n");
      out.write("\t\t\t\talert(\"이메일 입력하세요.\");\r\n");
      out.write("\t\t\t\tx.form[1].focus();\r\n");
      out.write("\r\n");
      out.write("\t\t\t\treturn;\r\n");
      out.write("\t\t\t}else if(pw == \"\") {\r\n");
      out.write("\t\t\t\talert(\"비밀번호를 입력하세요.\");\r\n");
      out.write("\t\t\t\tx.form[2].focus();\r\n");
      out.write("\r\n");
      out.write("\t\t\t\treturn;\r\n");
      out.write("\t\t\t}else if(pwch == \"\") {\r\n");
      out.write("\t\t\t\talert(\"비밀번호를 확인하세요\");\r\n");
      out.write("\t\t\t\tx.form[3].focus();\r\n");
      out.write("\r\n");
      out.write("\t\t\t\treturn;\r\n");
      out.write("\t\t\t}else if(pw !=pwch) {\r\n");
      out.write("\t\t\t\talert(\"같은 패스워드가 아닙니다.\");\r\n");
      out.write("\t\t\t\tx.form[2].value = \"\";\r\n");
      out.write("\t\t\t\tx.form[3].value = \"\";\r\n");
      out.write("\t\t\t\tx.form[2].focus();\r\n");
      out.write("\r\n");
      out.write("\t\t\t\treturn;\r\n");
      out.write("\t\t\t}else if(pw.length < 6) {\r\n");
      out.write("\t\t\t\talert(\"비밀번호는 6자 이상이어야 합니다.\");\r\n");
      out.write("\t\t\t\tx.form[2].value = \"\";\r\n");
      out.write("\t\t\t\tx.form[2].focus();\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\treturn;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t// 데이터를 다른 페이지로 이동\r\n");
      out.write("\t\t\t// if문 추가해서 사용자가 입력한 값에 따라 서로 다른 주소로 보낼 수도 있음\r\n");
      out.write("\r\n");
      out.write("\t\t\tx.form.action = \"registerOk.jsp\";\r\n");
      out.write("\r\n");
      out.write("\t\t\t// wjsekfqkdtlreh tjsxor rksmd\r\n");
      out.write("\t\t\tx.form.method = \"post\";\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t// 전송하기\r\n");
      out.write("\t\t\tx.form.submit();\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t\t}\r\n");
      out.write("\t</script>\r\n");
      out.write("  </head>\r\n");
      out.write("  <body>\r\n");
      out.write("  \t<form action=\"#\">\r\n");
      out.write("    <a href=\"#\" id = \"amazon\">\r\n");
      out.write("      <h2>amazon</h2>\r\n");
      out.write("    </a>\r\n");
      out.write("\r\n");
      out.write("    <div id=\"myDiv\">\r\n");
      out.write("      <p>계정 만들기</p>\r\n");
      out.write("\r\n");
      out.write("     \t 당신의 이름 <br>\r\n");
      out.write("      <input type=\"text\" name = \"name\" id = \"name\">  <br><br>\r\n");
      out.write("    \t  이메일 <br>\r\n");
      out.write("      <input type=\"text\" name = \"email\" id = \"email\" > <br><br>\r\n");
      out.write("    \t  암호 <br>\r\n");
      out.write("      <input type=\"text\" name = \"pw\" id =\"pw\"> <br>\r\n");
      out.write("      ! 비밀번호는 6자 이상이어야 합니다. <br> <br>\r\n");
      out.write("     \t 비밀번호를 다시 입력하세요\r\n");
      out.write("      <input type=\"text\" name = \"pwck\" id = \"pwck\"> <br><br>\r\n");
      out.write("      <input type=\"button\" value = \"아마존 계정 만들기\" id = \"bt\" onclick=\"checkForm(this)\">\r\n");
      out.write("      \r\n");
      out.write("      <br> <br>\r\n");
      out.write("   \t  \t 계정을 만들면 Amazon의 \r\n");
      out.write("   \t  \t <a href=\"https://www.amazon.com/gp/help/customer/display.html/ref=ap_register_notification_condition_of_use?ie=UTF8&nodeId=508088\">\r\n");
      out.write("   \t  \t \t사용조건\r\n");
      out.write("   \t  \t </a> 및 \r\n");
      out.write("   \t  \t <a href=\"https://www.amazon.com/gp/help/customer/display.html/ref=ap_register_notification_privacy_notice?ie=UTF8&nodeId=468496\">\r\n");
      out.write("   \t  \t 개인 정보 보호 정책에\r\n");
      out.write("   \t  \t </a> \r\n");
      out.write("   \t  \t 동의하게 됩니다.\r\n");
      out.write("      <br><br><br><hr>\r\n");
      out.write("\r\n");
      out.write("     \t 이미 계정이 있습니까? \r\n");
      out.write("     \t <a href=\"https://www.amazon.com/ap/signin?openid.pape.max_auth_age=0&openid.return_to=https%3A%2F%2Fwww.amazon.com%2F%3Fref_%3Dnav_signin&prevRID=ZJ62XFWZGGRXVVK7QSG6&openid.identity=http%3A%2F%2Fspecs.openid.net%2Fauth%2F2.0%2Fidentifier_select&openid.assoc_handle=usflex&openid.mode=checkid_setup&openid.ns.pape=http%3A%2F%2Fspecs.openid.net%2Fextensions%2Fpape%2F1.0&failedSignInCount=0&openid.claimed_id=http%3A%2F%2Fspecs.openid.net%2Fauth%2F2.0%2Fidentifier_select&pageId=usflex&ignoreAuthState=1&openid.ns=http%3A%2F%2Fspecs.openid.net%2Fauth%2F2.0\">로그인</a>\r\n");
      out.write("\r\n");
      out.write("    </div>\r\n");
      out.write("    </form>\r\n");
      out.write("  </body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
