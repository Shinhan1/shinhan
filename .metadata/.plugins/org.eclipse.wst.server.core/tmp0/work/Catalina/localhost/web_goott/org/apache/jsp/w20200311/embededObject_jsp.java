/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.31
 * Generated at: 2020-03-11 01:58:38 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.w20200311;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class embededObject_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>내장 객체</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<p>\r\n");
      out.write("\t\tjsp 파일을 저장하면 내부적으로 jsp 파일로 변환 <br />\r\n");
      out.write("\t\t-> 스크립틀릿 안의 코드 _sjpService()로 들어감 <br />\r\n");
      out.write("\t\t-> _jspService()에 몇개의 지역변수가 존재함 <br />\r\n");
      out.write("\t\t-> 그 자동으로 선언되는 변수가 jsp 내장 객체 (request, response, out) 임 <br />\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t+속성을 추가할 수 있는 객체들 <br />\r\n");
      out.write("\t\t<ul>\r\n");
      out.write("\t\t\t<li>&nbsp;&nbsp;&nbsp;&nbsp; (적용 가능 범위)</li>\r\n");
      out.write("\t\t\t<li>pageContext : 현재 페이지</li>\r\n");
      out.write("\t\t\t<li>request : 요청 범위까지</li>\r\n");
      out.write("\t\t\t<li>session : 웹브라우저가 종료될 때 까지</li>\r\n");
      out.write("\t\t\t<li>application : 톰캣(서버)가 종료할 때 까지</li>\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t\t<li>ex) pageContext.setAttribute(\"이름\", \"객체\");</li>\r\n");
      out.write("\t\t</ul>\r\n");
      out.write("\t\t\r\n");
      out.write("\t</p>\r\n");
      out.write("\t\r\n");
      out.write("\t");

		// 요청객체 종종 사용하는 것들
		String addrs = request.getRemoteAddr();
	
		String host = request.getRemoteHost();
		String method = request.getMethod();
		
		// 응답객체 종종 사용하는 것들
		int status = response.getStatus();
		//response.sendRedirect("../w20200310/login.jsp");
		
	
	
      out.write("\r\n");
      out.write("\t\r\n");
      out.write("\t<h2>현재 아이피 : ");
      out.print( addrs );
      out.write("</h2>\r\n");
      out.write("\t<h2>접근 URL : ");
      out.print( host );
      out.write("</h2>\r\n");
      out.write("\t<h2>method : ");
      out.print( method );
      out.write("</h2>\r\n");
      out.write("\t\r\n");
      out.write("\t<h2>status : ");
      out.print( status );
      out.write("</h2>\r\n");
      out.write("\t\r\n");
      out.write("\t<p>\r\n");
      out.write("\t\tJSP 페이지 이동시키는 방법 2가지 <br />\r\n");
      out.write("\t\t1. sendRedirect(\"주소\") : 최종 주소지 알 수 있음 <br />\r\n");
      out.write("\t\t2. forward(request, response) : 최종 주소지를 모름(알 필요가 없음), (요청, 응답) 객체가 전달함 <br />\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t \r\n");
      out.write("\t</p>\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
