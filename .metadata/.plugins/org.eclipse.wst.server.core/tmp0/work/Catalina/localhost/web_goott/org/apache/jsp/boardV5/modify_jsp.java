/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.31
 * Generated at: 2020-03-19 01:21:01 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.boardV5;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import dao.BoardV3_DAO;
import vo.BoardVO;
import dao.BoardDAO;

public final class modify_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("dao.BoardDAO");
    _jspx_imports_classes.add("vo.BoardVO");
    _jspx_imports_classes.add("dao.BoardV3_DAO");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>modify.jsp</title>\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write("table {\r\n");
      out.write("\twidth: 900px;\r\n");
      out.write("\tmargin: 0 auto;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("table, tr, th, td {\r\n");
      out.write("\tborder: 1px solid black;\r\n");
      out.write("\tborder-collapse: collapse;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("th {\r\n");
      out.write("\tpadding: 2px;\r\n");
      out.write("\tfont-size: 20px;\r\n");
      out.write("\tbackground-color: #FF6666;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#contents {\r\n");
      out.write("\tbackground-color: #FFCCFF;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".row {\r\n");
      out.write("\twidth: 200px;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("<script type=\"text/javascript\" src=\"../se2/js/HuskyEZCreator.js\" charset=\"utf-8\"></script>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("\tvar oEditors = [];\r\n");
      out.write("\t\r\n");
      out.write("\twindow.onload = function() {\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t// 네이버 스마트 에디터 skin 적용\r\n");
      out.write("\t\tnhn.husky.EZCreator.createInIFrame({\r\n");
      out.write("\t\t oAppRef: oEditors,\r\n");
      out.write("\t\t elPlaceHolder: \"ct\",\r\n");
      out.write("\t\t sSkinURI: \"../se2/SmartEditor2Skin.html\",\r\n");
      out.write("\t\t fCreator: \"createSEditor2\"\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\t\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t// 네이버 스마트 에디터 사용2 - 데이터 전송\r\n");
      out.write("\tfunction submitForm(obj) {\r\n");
      out.write("\t\t// ‘저장’ 버튼을 누르는 등 저장을 위한 액션을 했을 때 submitContents가 호출된다고 가정한다.\r\n");
      out.write("\t\t//function submitContents(elClickedObj) {\r\n");
      out.write("\t\t // 에디터의 내용이 textarea에 적용된다.\r\n");
      out.write("\t\t oEditors.getById[\"ct\"].exec(\"UPDATE_CONTENTS_FIELD\", []);\r\n");
      out.write("\r\n");
      out.write("\t\t // 에디터의 내용에 대한 값 검증은 이곳에서\r\n");
      out.write("\t\t // document.getElementById(\"ct\").value를 이용해서 처리한다.\r\n");
      out.write("\r\n");
      out.write("\t\t try {\r\n");
      out.write("\t\t     obj.form.submit();\r\n");
      out.write("\t\t } catch(e) {}\r\n");
      out.write("\t\t \r\n");
      out.write("\t\t//}\r\n");
      out.write("\t}\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<!-- 게시글 번호에 따른 데이터 조회 결과를 각 TD에 출력해 보세요. -->\r\n");
      out.write("\t<!--     table>tr#top>(th#t$+td)*3 -->\r\n");
      out.write("\t");

		String no = request.getParameter("bno");
		BoardV3_DAO dao = new BoardV3_DAO();
		BoardVO vo = new BoardVO();

		if (no != null) {
			int bno = Integer.parseInt(no);

			vo = dao.getData(bno);
		} else {
			response.sendRedirect("list.jsp");
		}
	
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t<form action=\"modifyOk.jsp\">\r\n");
      out.write("\t\t<input type=\"hidden\" name=\"bno\" value=\"");
      out.print( vo.getBno() );
      out.write("\" />\r\n");
      out.write("\t\t<table>\r\n");
      out.write("\t\t\t<tr id=\"top\">\r\n");
      out.write("\t\t\t\t<th id=\"t1\">작성자</th>\r\n");
      out.write("\t\t\t\t<td>");
      out.print(vo.getWriter());
      out.write("</td>\r\n");
      out.write("\t\t\t\t<th id=\"t2\">조회수</th>\r\n");
      out.write("\t\t\t\t<td>");
      out.print(vo.getHits());
      out.write("</td>\r\n");
      out.write("\t\t\t\t<th id=\"t3\">작성일시</th>\r\n");
      out.write("\t\t\t\t<td>");
      out.print(vo.getRegdate());
      out.write("</td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t\t\t<tr id=\"title\">\r\n");
      out.write("\t\t\t\t<th>제목</th>\r\n");
      out.write("\t\t\t\t<td colspan=\"5\">\r\n");
      out.write("\t\t\t\t\t<input type=\"text\" name=\"title\" id=\"\"\r\n");
      out.write("\t\t\t\t\tvalue=\"");
      out.print(vo.getTitle());
      out.write("\" size=\"30\" />\r\n");
      out.write("\t\t\t\t\t</td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t\t<tr id=\"contents\">\r\n");
      out.write("\t\t\t\t<th>내용</th>\r\n");
      out.write("\t\t\t\t<td colspan=\"5\">\r\n");
      out.write("\t\t\t\t\t<textarea name=\"contents\" id=\"ct\" cols=\"200\"\r\n");
      out.write("\t\t\t\t\t\trows=\"10\">");
      out.print(vo.getContents());
      out.write("\r\n");
      out.write("\t\t\t\t\t</textarea> <!-- disalbled 는textarea에서 사용자가 함부로 내용을 바꿀수없도록 block 해놓는 것이다. -->\r\n");
      out.write("\t\t\t\t</td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td colspan=\"6\">\r\n");
      out.write("\t\t\t\t<a href=\"list.jsp\"><input type=\"button\" value=\"목록\" /></a> \r\n");
      out.write("\t\t\t\t<a href=\"modify.jsp?bno=");
      out.print( vo.getBno() );
      out.write("\"><input type=\"button\" value=\"수정\" onclick=\"submitForm(this)\"/></a> \r\n");
      out.write("\t\t\t\t<a href=\"deleteOk.jsp?bno=");
      out.print( vo.getBno() );
      out.write("\"><input type=\"button\" value=\"삭제\" /></a>\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t</td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t</table>\r\n");
      out.write("\t</form>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
